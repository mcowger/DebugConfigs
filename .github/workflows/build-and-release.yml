name: Build and Release VS Code Extension

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Compile TypeScript
        run: npm run compile

      - name: Run tests
        run: |
          xvfb-run -a npm test
        if: runner.os == 'Linux'

      - name: Run tests (non-Linux)
        run: npm test
        if: runner.os != 'Linux'

  package-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Compile TypeScript
        run: npm run compile

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Package extension
        if: steps.check-tag.outputs.exists == 'false'
        run: vsce package --out debugconfigs-${{ steps.package-version.outputs.version }}.vsix

      - name: Create Release
        if: steps.check-tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: |
            Automated release of DebugConfigs VS Code Extension v${{ steps.package-version.outputs.version }}

            ## Installation
            Download the `.vsix` file and install it in VS Code using:
            ```
            code --install-extension debugconfigs-${{ steps.package-version.outputs.version }}.vsix
            ```

            Or use the VS Code Extensions view: `Extensions: Install from VSIX...`
          files: |
            debugconfigs-${{ steps.package-version.outputs.version }}.vsix
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PUSHKEYFORACTIONS }}
